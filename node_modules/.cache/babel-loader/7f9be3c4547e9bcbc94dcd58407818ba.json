{"ast":null,"code":"import logger from 'redux-logger';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport CommonReducer from './reducers/common';\nlet store;\nconst appReducer = combineReducers({\n  NewsReducer: CommonReducer\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type == 'LOGOUT_USER') {\n    return appReducer({}, action);\n  }\n\n  return appReducer(state, action);\n};\n\nfunction initStore(initialState) {\n  const middleware = [thunkMiddleware];\n  middleware.push(logger);\n  return createStore(rootReducer, initialState, applyMiddleware(...middleware));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState);\n\n  if (preloadedState && store) {\n    _store = initStore({ ...store.getState(),\n      ...preloadedState\n    });\n    store = undefined;\n  }\n\n  if (typeof window === 'undefined') return _store;\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = initializeStore(initialState);\n  return store;\n}","map":{"version":3,"names":["logger","combineReducers","createStore","applyMiddleware","thunkMiddleware","CommonReducer","store","appReducer","NewsReducer","rootReducer","state","action","type","initStore","initialState","middleware","push","initializeStore","preloadedState","_store","getState","undefined","window","useStore"],"sources":["/Users/yogesh/Documents/InfiniteScroll/src/store/index.js"],"sourcesContent":["\nimport logger from 'redux-logger'\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport CommonReducer from './reducers/common'\nlet store\n\n\nconst appReducer = combineReducers({\n  NewsReducer:CommonReducer,\n})\n\n\nconst rootReducer = (state, action) => {\n    if (action.type == 'LOGOUT_USER') {\n      return appReducer({}, action);\n    }\n    return appReducer(state, action);\n}\n\n\nfunction initStore(initialState) {\n  const middleware = [thunkMiddleware]\n  middleware.push(logger);\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...middleware)\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    store = undefined\n  }\n  if (typeof window === 'undefined') return _store\n  if (!store) store = _store\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = initializeStore(initialState)\n  return store\n}"],"mappings":"AACA,OAAOA,MAAP,MAAmB,cAAnB;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,IAAIC,KAAJ;AAGA,MAAMC,UAAU,GAAGN,eAAe,CAAC;EACjCO,WAAW,EAACH;AADqB,CAAD,CAAlC;;AAKA,MAAMI,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACnC,IAAIA,MAAM,CAACC,IAAP,IAAe,aAAnB,EAAkC;IAChC,OAAOL,UAAU,CAAC,EAAD,EAAKI,MAAL,CAAjB;EACD;;EACD,OAAOJ,UAAU,CAACG,KAAD,EAAQC,MAAR,CAAjB;AACH,CALD;;AAQA,SAASE,SAAT,CAAmBC,YAAnB,EAAiC;EAC/B,MAAMC,UAAU,GAAG,CAACX,eAAD,CAAnB;EACAW,UAAU,CAACC,IAAX,CAAgBhB,MAAhB;EACA,OAAOE,WAAW,CAChBO,WADgB,EAEhBK,YAFgB,EAGhBX,eAAe,CAAC,GAAGY,UAAJ,CAHC,CAAlB;AAKD;;AAED,OAAO,MAAME,eAAe,GAAIC,cAAD,IAAoB;EAAA;;EACjD,IAAIC,MAAM,cAAGb,KAAH,6CAAYO,SAAS,CAACK,cAAD,CAA/B;;EACA,IAAIA,cAAc,IAAIZ,KAAtB,EAA6B;IAC3Ba,MAAM,GAAGN,SAAS,CAAC,EACjB,GAAGP,KAAK,CAACc,QAAN,EADc;MAEjB,GAAGF;IAFc,CAAD,CAAlB;IAIAZ,KAAK,GAAGe,SAAR;EACD;;EACD,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC,OAAOH,MAAP;EACnC,IAAI,CAACb,KAAL,EAAYA,KAAK,GAAGa,MAAR;EACZ,OAAOA,MAAP;AACD,CAZM;AAcP,OAAO,SAASI,QAAT,CAAkBT,YAAlB,EAAgC;EACrC,MAAMR,KAAK,GAAGW,eAAe,CAACH,YAAD,CAA7B;EACA,OAAOR,KAAP;AACD"},"metadata":{},"sourceType":"module"}