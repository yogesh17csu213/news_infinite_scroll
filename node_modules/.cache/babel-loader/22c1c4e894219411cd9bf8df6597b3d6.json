{"ast":null,"code":"import { GetNewsDataRepo } from 'repositories';\nexport const GetNewsData = data => {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING'\n    });\n    await GetNewsDataRepo(data).then(response => {\n      if (response && response.status == 200) {\n        dispatch({\n          type: 'GET_NEWS_DATA_SUCCESS',\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: 'GET_NEWS_DATA_FAILURE',\n          payload: response\n        });\n      }\n    }).catch(error => {\n      if (error) {\n        dispatch({\n          type: 'GET_NEWS_DATA_FAILURE',\n          payload: error\n        });\n      }\n    });\n  };\n};\n_c = GetNewsData;\nexport const UpdateNewsData = data => {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING'\n    });\n    await GetNewsDataRepo(data).then(response => {\n      if (response && response.status == 200) {\n        dispatch({\n          type: 'UPDATE_NEWS_DATA_SUCCESS',\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: 'UPDATE_NEWS_DATA_FAILURE',\n          payload: response\n        });\n      }\n    }).catch(error => {\n      if (error) {\n        dispatch({\n          type: 'UPDATE_NEWS_DATA_FAILURE',\n          payload: error\n        });\n      }\n    });\n  };\n};\n_c2 = UpdateNewsData;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetNewsData\");\n$RefreshReg$(_c2, \"UpdateNewsData\");","map":{"version":3,"names":["GetNewsDataRepo","GetNewsData","data","dispatch","type","then","response","status","payload","catch","error","UpdateNewsData"],"sources":["/Users/yogesh/Documents/InfiniteScroll/src/store/actions/index.js"],"sourcesContent":["import {GetNewsDataRepo} from 'repositories'\n\nexport const GetNewsData=(data)=>{\n    return async (dispatch)=>{\n        dispatch({type:'LOADING'})\n        await GetNewsDataRepo(data)\n        .then((response)=>{\n            if(response && response.status== 200){\n                dispatch({type:'GET_NEWS_DATA_SUCCESS',payload:response.data })\n               \n            }else{\n                dispatch({type:'GET_NEWS_DATA_FAILURE',payload:response })\n            }\n        })\n        .catch((error)=>{\n            if(error ){\n                dispatch({type:'GET_NEWS_DATA_FAILURE',payload:error })\n            }\n        })\n    }\n}\n\nexport const UpdateNewsData=(data)=>{\n    return async (dispatch)=>{\n        dispatch({type:'LOADING'})\n        await GetNewsDataRepo(data)\n        .then((response)=>{\n            if(response && response.status== 200){\n                dispatch({type:'UPDATE_NEWS_DATA_SUCCESS',payload:response.data })\n               \n            }else{\n                dispatch({type:'UPDATE_NEWS_DATA_FAILURE',payload:response })\n            }\n        })\n        .catch((error)=>{\n            if(error ){\n                dispatch({type:'UPDATE_NEWS_DATA_FAILURE',payload:error })\n            }\n        })\n    }\n}\n"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,cAA9B;AAEA,OAAO,MAAMC,WAAW,GAAEC,IAAD,IAAQ;EAC7B,OAAO,MAAOC,QAAP,IAAkB;IACrBA,QAAQ,CAAC;MAACC,IAAI,EAAC;IAAN,CAAD,CAAR;IACA,MAAMJ,eAAe,CAACE,IAAD,CAAf,CACLG,IADK,CACCC,QAAD,IAAY;MACd,IAAGA,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAkB,GAAjC,EAAqC;QACjCJ,QAAQ,CAAC;UAACC,IAAI,EAAC,uBAAN;UAA8BI,OAAO,EAACF,QAAQ,CAACJ;QAA/C,CAAD,CAAR;MAEH,CAHD,MAGK;QACDC,QAAQ,CAAC;UAACC,IAAI,EAAC,uBAAN;UAA8BI,OAAO,EAACF;QAAtC,CAAD,CAAR;MACH;IACJ,CARK,EASLG,KATK,CASEC,KAAD,IAAS;MACZ,IAAGA,KAAH,EAAU;QACNP,QAAQ,CAAC;UAACC,IAAI,EAAC,uBAAN;UAA8BI,OAAO,EAACE;QAAtC,CAAD,CAAR;MACH;IACJ,CAbK,CAAN;EAcH,CAhBD;AAiBH,CAlBM;KAAMT,W;AAoBb,OAAO,MAAMU,cAAc,GAAET,IAAD,IAAQ;EAChC,OAAO,MAAOC,QAAP,IAAkB;IACrBA,QAAQ,CAAC;MAACC,IAAI,EAAC;IAAN,CAAD,CAAR;IACA,MAAMJ,eAAe,CAACE,IAAD,CAAf,CACLG,IADK,CACCC,QAAD,IAAY;MACd,IAAGA,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAkB,GAAjC,EAAqC;QACjCJ,QAAQ,CAAC;UAACC,IAAI,EAAC,0BAAN;UAAiCI,OAAO,EAACF,QAAQ,CAACJ;QAAlD,CAAD,CAAR;MAEH,CAHD,MAGK;QACDC,QAAQ,CAAC;UAACC,IAAI,EAAC,0BAAN;UAAiCI,OAAO,EAACF;QAAzC,CAAD,CAAR;MACH;IACJ,CARK,EASLG,KATK,CASEC,KAAD,IAAS;MACZ,IAAGA,KAAH,EAAU;QACNP,QAAQ,CAAC;UAACC,IAAI,EAAC,0BAAN;UAAiCI,OAAO,EAACE;QAAzC,CAAD,CAAR;MACH;IACJ,CAbK,CAAN;EAcH,CAhBD;AAiBH,CAlBM;MAAMC,c"},"metadata":{},"sourceType":"module"}